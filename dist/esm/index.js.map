{"version":3,"file":"index.js","sources":["../../node_modules/string-match-all/esm/index.js","../../src/constants/constants.ts","../../src/helpers/SundaHelper.ts","../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../src/helpers/SyllableBuilder.ts","../../src/functions/toSundanese.ts","../../src/helpers/LatinHelper.ts","../../src/functions/toLatin.ts"],"sourcesContent":["function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\n/*! (c) Andrea Giammarchi - ISC */\n// requires a global Symbol\nvar iterator = /* istanbul ignore next */\nfunction () {\n  var i = 0;\n  var self = this;\n  return {\n    next: function () {\n      var done = self.length <= i;\n      var value = done ? void 0 : self[i++];\n      return {\n        value: value,\n        done: done\n      };\n    }\n  };\n};\n\nfunction isRegexp(value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n\nvar flagMap = {\n  global: 'g',\n  ignoreCase: 'i',\n  multiline: 'm',\n  dotAll: 's',\n  sticky: 'y',\n  unicode: 'u'\n};\nfunction clonedRegexp(regexp, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!isRegexp(regexp)) {\n    throw new TypeError('Expected a RegExp instance');\n  }\n\n  var flags = Object.keys(flagMap).map(function (flag) {\n    return (typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : '';\n  }).join('');\n  var clonedRegexp = new RegExp(options.source || regexp.source, flags);\n  clonedRegexp.lastIndex = typeof options.lastIndex === 'number' ? options.lastIndex : regexp.lastIndex;\n  return clonedRegexp;\n}\n\nvar _$exec;\nvar supportsGroups = ('groups' in ((_$exec = /a/.exec('a')) != null ? _$exec : {}));\n/**\n * @param {RegExpExecArray?} previousMatch\n * @param {RegExpExecArray?} match\n */\n\nvar isInfiniteLoop = function isInfiniteLoop(previousMatch, match) {\n  var isLooselyTrue = (previousMatch == null ? void 0 : previousMatch[0]) === (match == null ? void 0 : match[0]) && (previousMatch == null ? void 0 : previousMatch.index) === (match == null ? void 0 : match.index);\n\n  if (isLooselyTrue) {\n    return JSON.stringify(_extends({}, previousMatch)) === JSON.stringify(_extends({}, match));\n  }\n\n  return false;\n};\n\nvar INFINITE_LOOP_ERROR = 'Infinite loop.';\n/**\n * @param {string|RegExp} matcher\n * @param {boolean}       skipCloning\n */\n\nfunction resolveMatcher(matcher, skipCloning) {\n  if (skipCloning === void 0) {\n    skipCloning = false;\n  }\n\n  if (!(matcher instanceof RegExp)) {\n    return new RegExp(matcher, 'g');\n  }\n\n  if (skipCloning) {\n    return matcher;\n  }\n\n  return clonedRegexp(matcher);\n}\n/**\n * Returns an iterator of all results matching a string against a regular expression, including capturing groups.\n *\n * @param   {string}                             string  String to match.\n * @param   {string|RegExp}                      matcher Value to match original string. If a non-`RegExp` object is passed, it is implicitly converted to a `RegExp` by using `new RegExp(regexp, 'g')`. The `RegExp` object must have the `global` flag, otherwise a `TypeError` will be thrown.\n *\n * @returns {IterableIterator<RegExpMatchArray>}\n */\n\n\nfunction ponyfill(string, matcher) {\n  if (typeof string !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  var composedMatcher = resolveMatcher(matcher);\n  var globalFlag = composedMatcher.global;\n\n  if (!globalFlag) {\n    throw new TypeError('`String.prototype.matchAll` ponyfill called with a non-global RegExp argument');\n  }\n  /** @type {RegExpMatchArray[]} */\n\n\n  var matches = [];\n  var match, previousMatch;\n\n  try {\n    previousMatch = null;\n\n    while ((match = composedMatcher.exec(string)) !== null) {\n      if (isInfiniteLoop(previousMatch, match)) {\n        throw new Error(INFINITE_LOOP_ERROR);\n      }\n\n      previousMatch = match;\n      matches.push(match);\n    }\n  } catch (error) {\n    /* istanbul ignore if */\n    if (!(error instanceof Error && error.message === INFINITE_LOOP_ERROR)) {\n      throw error;\n    }\n\n    matches.pop();\n    string.replace(composedMatcher, function (value, index, input, groups) {\n      /** @type {RegExpMatchArray} */\n      var match = [value];\n      match.index = index;\n      match.input = input;\n\n      if (supportsGroups) {\n        match.groups = groups;\n      }\n\n      matches.push(match);\n      return value;\n    });\n  }\n\n  if (typeof Symbol === 'undefined') {\n    // @ts-ignore\n    return matches[iterator]();\n  }\n\n  return matches[Symbol.iterator]();\n}\n/**\n * Returns an iterator of all results matching a string against a regular expression, including capturing groups. Uses native implementation if available.\n *\n * @param   {string}                             string  String to match.\n * @param   {string|RegExp}                      matcher Value to match original string. If a non-`RegExp` object is passed, it is implicitly converted to a `RegExp` by using `new RegExp(regexp, 'g')`. The `RegExp` object must have the `global` flag, otherwise a `TypeError` will be thrown.\n *\n * @returns {IterableIterator<RegExpMatchArray>}\n */\n\n\nfunction preferNative(string, matcher) {\n  if (typeof String.prototype.matchAll !== 'undefined') {\n    var composedMatcher = resolveMatcher(matcher, true);\n    return string.matchAll(composedMatcher);\n  }\n  /* istanbul ignore next */\n\n\n  return ponyfill(string, matcher);\n}\n\nexport { ponyfill as default, preferNative };\n//# sourceMappingURL=index.js.map\n","/* eslint-disable quote-props */\ntype CharacterMapping = {\n  [char: string]: string;\n};\n\nfunction invertMapping(obj: CharacterMapping): CharacterMapping {\n  const result = {};\n  const _keys = Object.keys(obj);\n  for (let i = 0, length = _keys.length; i < length; i++) {\n    result[obj[_keys[i]]] = _keys[i];\n  }\n  return result;\n}\nnamespace SundaConst {\n  /* Regex for various type of valid Latin glyph for Sundanese */\n  const LATIN = {\n    CONSONANTS: `ng|ny|kh|sy|[kgcjtdnpbmyrlwshfqvxz]`,\n    CONSONANTS_RERENGKEN_SONORANT: `[ylr]`,\n    CONSONANTS_RERENGKEN_FINAL: `ng|[rh]`,\n    CONSONANTS_WITHOUT_RERENGKEN_FINAL: `n(?![gy])|k(?!h)|s(?!y)|ny|kh|sy|[gcjtdpbmylwfvqxz]`,\n    DIGITS: `[\\\\d]+`,\n    NOT_LETTERS: `[^a-zA-Z\\\\d\\\\u00C0-\\\\u00FF]`,\n    VOWELS: `e\\`|eu|[aiueoéè]`,\n  };\n  /* Regex for various type of valid Sundanese characters glyph */\n  const SUNDA = {\n    ANGKA: `[\\\\u1BB0-\\\\u1BB9]`,\n    NGALAGENA: `[\\\\u1B8A-\\\\u1BA0\\\\u1BAE\\\\u1BAF]`,\n    NOT_SUNDA: `[^\\\\u1B80-\\\\u1BA8\\\\u1BAE-\\\\u1BB9]`,\n    PIPA: `[|]`,\n    RARANGKEN_SONORANT: `[\\\\u1BA1-\\\\u1BA3]`,\n    RARANGKEN_VOWEL: `[\\\\u1BA4-\\\\u1BAA]`,\n    RARANGKEN_FINAL: `[\\\\u1B80-\\\\u1B82]`,\n    SWARA: `[\\\\u1B83-\\\\u1B89]`,\n  };\n  export const REGEX = {\n    /* Capturing Latin characters that corresponds to a valid Sundanese glyph */\n    CAPTURE_LATIN: [\n      `(${LATIN.DIGITS})`,\n      `|`,\n      `(${LATIN.NOT_LETTERS})`,\n      `|`,\n      `(${LATIN.CONSONANTS})?`,\n      `(${LATIN.CONSONANTS_RERENGKEN_SONORANT})?`,\n      `(${LATIN.VOWELS})`,\n      `((?:${LATIN.CONSONANTS_RERENGKEN_FINAL})(?!${LATIN.VOWELS}))?`,\n      `((?:${LATIN.CONSONANTS_WITHOUT_RERENGKEN_FINAL})(?!${LATIN.VOWELS}))?`,\n      `|`,\n      `(${LATIN.CONSONANTS})`,\n    ].join(\"\"),\n    /* Capturing Sundanese characters that corresponds to a valid Latin glyph */\n    CAPTURE_SUNDA: [\n      `(?:${SUNDA.PIPA})?(${SUNDA.ANGKA})(?:${SUNDA.PIPA})?`,\n      `|`,\n      `(${SUNDA.NOT_SUNDA})`,\n      `|`,\n      `(?:(${SUNDA.NGALAGENA})(${SUNDA.RARANGKEN_SONORANT})?(${SUNDA.RARANGKEN_VOWEL})?`,\n      `|(${SUNDA.SWARA}))`,\n      `(${SUNDA.RARANGKEN_FINAL})?`,\n    ].join(\"\"),\n  };\n}\n\n/* Various type of Sundanese characters, accessed with a key of Latin character */\nnamespace SundaneseChars {\n  export const SWARA: CharacterMapping = {\n    a: \"ᮃ\",\n    i: \"ᮄ\",\n    u: \"ᮅ\",\n    e: \"ᮈ\",\n    é: \"ᮆ\",\n    eu: \"ᮉ\",\n    o: \"ᮇ\",\n  };\n  export const NGALAGENA: CharacterMapping = {\n    k: \"ᮊ\",\n    g: \"ᮌ\",\n    ng: \"ᮍ\",\n    c: \"ᮎ\",\n    j: \"ᮏ\",\n    ny: \"ᮑ\",\n    t: \"ᮒ\",\n    d: \"ᮓ\",\n    n: \"ᮔ\",\n    p: \"ᮕ\",\n    b: \"ᮘ\",\n    m: \"ᮙ\",\n    y: \"ᮚ\",\n    r: \"ᮛ\",\n    l: \"ᮜ\",\n    w: \"ᮝ\",\n    s: \"ᮞ\",\n    h: \"ᮠ\",\n    f: \"ᮖ\",\n    q: \"ᮋ\",\n    v: \"ᮗ\",\n    x: \"ᮟ\",\n    z: \"ᮐ\",\n    kh: \"ᮮ\",\n    sy: \"ᮯ\",\n  };\n  export const RARANGKEN: CharacterMapping = {\n    i: \"ᮤ\",\n    u: \"ᮥ\",\n    e: \"ᮨ\",\n    é: \"ᮦ\",\n    eu: \"ᮩ\",\n    o: \"ᮧ\",\n    r: \"ᮁ\",\n    ng: \"ᮀ\",\n    h: \"ᮂ\",\n    pamaeh: \"᮪\",\n  };\n  export const RARANGKEN_SONORANT: CharacterMapping = {\n    l: \"ᮣ\",\n    r: \"ᮢ\",\n    y: \"ᮡ\",\n  };\n  export const ANGKA: CharacterMapping = {\n    \"1\": \"᮱\",\n    \"2\": \"᮲\",\n    \"3\": \"᮳\",\n    \"4\": \"᮴\",\n    \"5\": \"᮵\",\n    \"6\": \"᮶\",\n    \"7\": \"᮷\",\n    \"8\": \"᮸\",\n    \"9\": \"᮹\",\n    \"0\": \"᮰\",\n  };\n}\n\n/* Various type of Latin characters, accessed with a key of Sundanese character */\nnamespace LatinChars {\n  export const SWARA: CharacterMapping = invertMapping(SundaneseChars.SWARA);\n  export const NGALAGENA: CharacterMapping = invertMapping(SundaneseChars.NGALAGENA);\n  export const RARANGKEN: CharacterMapping = invertMapping(SundaneseChars.RARANGKEN);\n  export const RARANGKEN_SONORANT: CharacterMapping = invertMapping(\n    SundaneseChars.RARANGKEN_SONORANT\n  );\n  export const ANGKA: CharacterMapping = invertMapping(SundaneseChars.ANGKA);\n}\n\nexport { LatinChars, SundaneseChars, SundaConst };\n","import { SundaneseChars } from \"../constants/constants\";\n\n/**\n * @description Provides many helper function to get Sundanese unicode characters from Latin characters\n */\nnamespace SundaHelper {\n  /**\n   * @description Returns the corresponding main consonant character\n   * @param char The character to be transliterated\n   */\n  export const getMain = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in SundaneseChars.SWARA) return SundaneseChars.SWARA[char];\n    if (char in SundaneseChars.NGALAGENA) return SundaneseChars.NGALAGENA[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding sonorant consonant character\n   * @param char The character to be transliterated\n   */\n  export const getSonorant = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in SundaneseChars.RARANGKEN_SONORANT) return SundaneseChars.RARANGKEN_SONORANT[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding rarangken character\n   * @param char The character to be transliterated\n   */\n  export const getRarangken = (char: string): string => {\n    if (char == null) return \"\";\n    if (char === \"a\") return \"\";\n    if (char === \"e`\") return SundaneseChars.RARANGKEN[\"é\"];\n    if (char in SundaneseChars.RARANGKEN) return SundaneseChars.RARANGKEN[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding final (muted) consonant character\n   * @param char The character to be transliterated\n   */\n  export const getFinal = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in SundaneseChars.NGALAGENA) return SundaneseChars.NGALAGENA[char] + SundaneseChars.RARANGKEN[\"pamaeh\"];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding Sundanese number character\n   * @param char The character to be transliterated\n   */\n  export const getNumber = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in SundaneseChars.ANGKA) return SundaneseChars.ANGKA[char];\n    return char;\n  };\n}\n\nexport default SundaHelper;\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","/**\n * @description A simple class that helps to compile and build the transliterated syllable.\n */\nclass SyllableBuilder {\n  result: string;\n  constructor() {\n    this.result = \"\";\n  }\n  add(input: string): void {\n    this.result += input;\n  }\n  build(input?: string): string {\n    if (input) this.result = input;\n    return this.result;\n  }\n}\n\nexport default SyllableBuilder;\n","import { preferNative as matchAll } from \"string-match-all\";\nimport SundaHelper from \"../helpers/SundaHelper\";\nimport SyllableBuilder from \"../helpers/SyllableBuilder\";\nimport { SundaConst } from \"../constants/constants\";\n\nconst toSundanese = (input: string): string => {\n  /* Normalize input */\n  input = input.trim().toLowerCase();\n\n  /*\n   * Here, we break down the input on a per syllable basis using RegEx,\n   * iterate and feed it into the syllable converter,\n   * and append the result to the output string.\n   */\n  const syllables = [...matchAll(input, RegExp(SundaConst.REGEX.CAPTURE_LATIN, \"g\"))];\n\n  let output = \"\";\n  if (syllables.length > 0) {\n    for (const group of syllables) {\n      output += getTransliteration(group);\n    }\n  }\n  return output;\n};\n\n/**\n * @description Converts the already broken down syllable into Sundanese script\n */\nconst getTransliteration = (groups: RegExpMatchArray): string => {\n  /* Assign each capture groups into variable names */\n  const [\n    digits,\n    punctuation,\n    consonantMain,\n    consonantSonorant,\n    vowel,\n    consonantRarangken,\n    consonantFinal,\n    consonantStandalone,\n  ] = groups.slice(1, 10);\n\n  const builder = new SyllableBuilder();\n\n  /* Converts syllable containing numbers */\n  if (digits != null) {\n    let numbers = \"\";\n    for (const each of digits) {\n      numbers += SundaHelper.getNumber(each);\n    }\n    return builder.build(\"|\" + numbers + \"|\");\n  }\n\n  /* Converts syllable containing punctuations */\n  if (punctuation != null) {\n    return builder.build(punctuation);\n  }\n\n  /* Converts syllable containing main letters */\n  if (consonantStandalone == null) {\n    if (consonantMain != null) {\n      /* Add main consonant */\n      builder.add(SundaHelper.getMain(consonantMain));\n      /* Add sonorant */\n      if (consonantSonorant != null) {\n        builder.add(SundaHelper.getSonorant(consonantSonorant));\n      }\n      /* Add vowel sign */\n      builder.add(SundaHelper.getRarangken(vowel));\n    } else {\n      /* Add standalone vowel character */\n      builder.add(SundaHelper.getMain(vowel));\n    }\n    /* Add consonant sign */\n    if (consonantRarangken != null) {\n      builder.add(SundaHelper.getRarangken(consonantRarangken));\n    }\n    /* Add muted final consonant */\n    if (consonantFinal != null) {\n      builder.add(SundaHelper.getFinal(consonantFinal));\n    }\n  } else {\n    /* Add muted standalone consonant */\n    builder.add(SundaHelper.getFinal(consonantStandalone));\n  }\n  return builder.build();\n};\n\nexport default toSundanese;\n","import { LatinChars } from \"../constants/constants\";\n\n/**\n * @description Provides many helper function to get Latin characters from Sundanese characters\n */\nnamespace LatinHelper {\n  /**\n   * @description Returns the corresponding Ngalagena and Swara character\n   * @param char The character to be transliterated\n   */\n  export const getLetter = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.SWARA) return LatinChars.SWARA[char];\n    if (char in LatinChars.NGALAGENA) return LatinChars.NGALAGENA[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding sonorant consonant character\n   * @param char The character to be transliterated\n   */\n  export const getSonorant = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.RARANGKEN_SONORANT) return LatinChars.RARANGKEN_SONORANT[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding rarangken character\n   * @param char The character to be transliterated\n   */\n  export const getRarangken = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.RARANGKEN) return LatinChars.RARANGKEN[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding Latin number character\n   * @param char The character to be transliterated\n   */\n  export const getNumber = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.ANGKA) return LatinChars.ANGKA[char];\n    return char;\n  };\n}\n\nexport default LatinHelper;\n","import { preferNative as matchAll } from \"string-match-all\";\nimport LatinHelper from \"../helpers/LatinHelper\";\nimport SyllableBuilder from \"../helpers/SyllableBuilder\";\nimport { SundaConst, SundaneseChars } from \"../constants/constants\";\n\nconst toLatin = (input: string): string => {\n  /* Trim input */\n  input = input.trim();\n\n  /*\n   * Here, we break down the input on a per-syllable basis using RegEx,\n   * iterate and feed it into the syllable transliterator,\n   * and append the result to the output string.\n   */\n  const syllables = [...matchAll(input, RegExp(SundaConst.REGEX.CAPTURE_SUNDA, \"g\"))];\n\n  let output = \"\";\n  if (syllables.length > 0) {\n    for (const group of syllables) {\n      output += getTransliteration(group);\n    }\n  }\n  return output;\n};\n\n/**\n * @description Converts the already broken down syllable into Sundanese script\n */\nconst getTransliteration = (groups: RegExpMatchArray): string => {\n  /* Assign each capture groups into variable names */\n  const [angka, notSunda, ngalagena, rarangkenSonorant, rarangkenVowel, swara, rarangkenFinal] = groups.slice(1, 9);\n\n  const builder = new SyllableBuilder();\n\n  /* Converts syllable containing numbers */\n  if (angka != null) {\n    return builder.build(LatinHelper.getNumber(angka));\n  }\n\n  /* Converts syllable containing punctuations */\n  if (notSunda != null) {\n    return builder.build(notSunda);\n  }\n\n  /* Converts syllable containing letters */\n  if (ngalagena != null) {\n    builder.add(LatinHelper.getLetter(ngalagena));\n\n    /* Converts muted consonant syllable */\n    if (rarangkenVowel === SundaneseChars.RARANGKEN[\"pamaeh\"]) {\n      return builder.build();\n    }\n\n    /* Converts sonorant rarangken */\n    if (rarangkenSonorant != null) {\n      builder.add(LatinHelper.getSonorant(rarangkenSonorant));\n    }\n\n    /* Converts vowel rarangken */\n    if (rarangkenVowel != null) {\n      builder.add(LatinHelper.getRarangken(rarangkenVowel));\n    } else {\n      builder.add(\"a\");\n    }\n  } else {\n    /* Add muted standalone consonant */\n    builder.add(LatinHelper.getLetter(swara));\n  }\n\n  if (rarangkenFinal != null) {\n    builder.add(LatinHelper.getRarangken(rarangkenFinal));\n  }\n\n  return builder.build();\n};\n\nexport default toLatin;\n"],"names":["invertMapping","obj","result","_keys","Object","keys","i","length","LATIN","CONSONANTS","CONSONANTS_RERENGKEN_SONORANT","CONSONANTS_RERENGKEN_FINAL","CONSONANTS_WITHOUT_RERENGKEN_FINAL","DIGITS","NOT_LETTERS","VOWELS","SUNDA","ANGKA","NGALAGENA","NOT_SUNDA","PIPA","RARANGKEN_SONORANT","RARANGKEN_VOWEL","RARANGKEN_FINAL","SWARA","CAPTURE_LATIN","join","CAPTURE_SUNDA","SundaConst","a","u","e","é","eu","o","k","g","ng","c","j","ny","t","d","n","p","b","m","y","r","l","w","s","h","f","q","v","x","z","kh","sy","pamaeh","SundaneseChars","RARANGKEN","LatinChars","char","SundaHelper","SyllableBuilder","constructor","add","input","build","toSundanese","trim","toLowerCase","syllables","matchAll","RegExp","REGEX","output","group","getTransliteration","groups","digits","punctuation","consonantMain","consonantSonorant","vowel","consonantRarangken","consonantFinal","consonantStandalone","slice","builder","numbers","each","getNumber","getMain","getSonorant","getRarangken","getFinal","LatinHelper","toLatin","angka","notSunda","ngalagena","rarangkenSonorant","rarangkenVowel","swara","rarangkenFinal","getLetter"],"mappings":"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"}